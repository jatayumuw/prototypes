//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Rhythm/Assets/configs/ControlInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlInput"",
    ""maps"": [
        {
            ""name"": ""Interactions"",
            ""id"": ""010df929-9932-4f18-bb52-bc3ee12d7cbe"",
            ""actions"": [
                {
                    ""name"": ""Control A"",
                    ""type"": ""Button"",
                    ""id"": ""9e986baa-4e74-44c8-ab9e-3cceee1fc538"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Control B"",
                    ""type"": ""Button"",
                    ""id"": ""99a10d14-f980-4448-9eaf-0dfa99246439"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""a814414a-fea4-4b02-a533-5e5d58b07e36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d3f49948-db43-4be9-9c59-97a82d25ed03"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Control A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bde1b80e-3f20-45f1-987f-79c076072d5a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Control B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98371042-abac-4718-a0bb-7bef96ec5b2d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // Interactions
        m_Interactions = asset.FindActionMap("Interactions", throwIfNotFound: true);
        m_Interactions_ControlA = m_Interactions.FindAction("Control A", throwIfNotFound: true);
        m_Interactions_ControlB = m_Interactions.FindAction("Control B", throwIfNotFound: true);
        m_Interactions_Pause = m_Interactions.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Interactions
    private readonly InputActionMap m_Interactions;
    private List<IInteractionsActions> m_InteractionsActionsCallbackInterfaces = new List<IInteractionsActions>();
    private readonly InputAction m_Interactions_ControlA;
    private readonly InputAction m_Interactions_ControlB;
    private readonly InputAction m_Interactions_Pause;
    public struct InteractionsActions
    {
        private @ControlInput m_Wrapper;
        public InteractionsActions(@ControlInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ControlA => m_Wrapper.m_Interactions_ControlA;
        public InputAction @ControlB => m_Wrapper.m_Interactions_ControlB;
        public InputAction @Pause => m_Wrapper.m_Interactions_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Interactions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionsActions set) { return set.Get(); }
        public void AddCallbacks(IInteractionsActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractionsActionsCallbackInterfaces.Add(instance);
            @ControlA.started += instance.OnControlA;
            @ControlA.performed += instance.OnControlA;
            @ControlA.canceled += instance.OnControlA;
            @ControlB.started += instance.OnControlB;
            @ControlB.performed += instance.OnControlB;
            @ControlB.canceled += instance.OnControlB;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IInteractionsActions instance)
        {
            @ControlA.started -= instance.OnControlA;
            @ControlA.performed -= instance.OnControlA;
            @ControlA.canceled -= instance.OnControlA;
            @ControlB.started -= instance.OnControlB;
            @ControlB.performed -= instance.OnControlB;
            @ControlB.canceled -= instance.OnControlB;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IInteractionsActions instance)
        {
            if (m_Wrapper.m_InteractionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractionsActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractionsActions @Interactions => new InteractionsActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IInteractionsActions
    {
        void OnControlA(InputAction.CallbackContext context);
        void OnControlB(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
